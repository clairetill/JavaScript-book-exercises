1. Concatenate two or more strings, one with your first name and one with your last, to create a string with your full name as its value. For example, if your name is John Doe, think about how you can put 'John' and 'Doe' together to get 'John Doe'.

'Claire' + ' ' + 'Tillinghast'

2. Use the arithmetic operators to determine the individual digits of a 4-digit number like 4936:

> let number = 4936
> let ones = number % 10
> ones
= 6

> number = (number - ones) / 10
= 493

> let tens = number % 10
> tens
= 3

> number = (number - tens) / 10
= 49

> let hundreds = number % 10
> hundreds
= 9

> let thousands = (number - hundreds) / 10
> thousands
= 4

3. Identify the data type for each of the following values:

'true' = string
false = boolean
1.5 = number
2 = number
undefined = undefined
{ foo: 'bar' } = object

4. Given the code below, identify which lines are statements and which are expressions:

var foo; //statement
foo = 5; //expression
foo; //expression

5. Explain why this code logs '510' instead of 15.

console.log('5' + 10);

Every + expression that has a string operand produces a string result regardless of the other operand. 

6. Refactor the code from the previous exercise to use explicit coercion, so it logs 15 instead.

console.log(Number('5') + 10);

7. Use the template literal syntax along with the expression Number('5') + 10 to log the following sentence to the console:

The value of 5 + 10 is 15.

console.log('The value of 5 + 10 is ${Number('5') + 10}.');

8. Will an error occur if you try to access an array element with an index that is greater than or equal to the length of the array? For example:
var foo = ['a', 'b', 'c'];
foo.length;  // returns 3
foo[3];      // will this result in an error?

No, there won't be an error. When you use an index value that has no corresponding element, Javascript returns undefined. 

9. Create an array named names that contains a list of pet names. For instance:

Name
asta
butterscotch
pudding
neptune
darwin
You can use that data or make up your own.

let names = [ 'asta', 'butterscotch', 'pudding', 'neptune', 'darwin' ];

10. Create an object named pets that contains a list of pet names and the type of animal. For instance:

Name	Animal
asta	dog
butterscotch	cat
pudding	cat
neptune	fish
darwin	lizard

let pets = { asta: 'dog', butterscotch: 'cat', pudding: 'cat', neptune: 'fish', darwin: 'lizard' };

11. What value does the following expression evaluate to?

'foo' === 'Foo'

It evaluates to false since case matters when comparing strings.

12. What value does the following expression evaluate to?

parseInt('3.1415')
It evaluates to 3. parseInt converts strings that begin with a digit to their numeric equivalent. If it encounters a non-digit such as ., it stops converting. Thus, this example converts the 3 at the beginning of the string but ignores everything else.

13. What value does the following expression evaluate to?

'12' < '9'

The expression evaluates as true since the operands are strings, not numbers. When you compare two strings, JavaScript performs a character-by-character comparison going from left to right, so on the first comparison, it determines that '1' < '9', so '12' must be less than '9'.

